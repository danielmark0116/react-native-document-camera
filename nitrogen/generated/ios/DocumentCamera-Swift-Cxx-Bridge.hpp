///
/// DocumentCamera-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `DocumentPage` to properly resolve imports.
namespace margelo::nitro::documentcamera { struct DocumentPage; }
// Forward declaration of `DocumentScan` to properly resolve imports.
namespace margelo::nitro::documentcamera { struct DocumentScan; }
// Forward declaration of `HybridDocumentCameraSpec` to properly resolve imports.
namespace margelo::nitro::documentcamera { class HybridDocumentCameraSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridDocumentCameraSpec_cxx` to properly resolve imports.
namespace DocumentCamera { class HybridDocumentCameraSpec_cxx; }

// Include C++ defined types
#include "DocumentPage.hpp"
#include "DocumentScan.hpp"
#include "HybridDocumentCameraSpec.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/PromiseHolder.hpp>
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <string>
#include <vector>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::documentcamera::bridge::swift {

  // pragma MARK: std::vector<DocumentPage>
  /**
   * Specialized version of `std::vector<DocumentPage>`.
   */
  using std__vector_DocumentPage_ = std::vector<DocumentPage>;
  inline std::vector<DocumentPage> create_std__vector_DocumentPage_(size_t size) {
    std::vector<DocumentPage> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::shared_ptr<Promise<DocumentScan>>
  /**
   * Specialized version of `std::shared_ptr<Promise<DocumentScan>>`.
   */
  using std__shared_ptr_Promise_DocumentScan__ = std::shared_ptr<Promise<DocumentScan>>;
  inline std::shared_ptr<Promise<DocumentScan>> create_std__shared_ptr_Promise_DocumentScan__() {
    return Promise<DocumentScan>::create();
  }
  inline PromiseHolder<DocumentScan> wrap_std__shared_ptr_Promise_DocumentScan__(std::shared_ptr<Promise<DocumentScan>> promise) {
    return PromiseHolder<DocumentScan>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const DocumentScan& /* result */)>
  /**
   * Specialized version of `std::function<void(const DocumentScan&)>`.
   */
  using Func_void_DocumentScan = std::function<void(const DocumentScan& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const DocumentScan& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_DocumentScan_Wrapper final {
  public:
    explicit Func_void_DocumentScan_Wrapper(std::function<void(const DocumentScan& /* result */)>&& func): _function(std::make_shared<std::function<void(const DocumentScan& /* result */)>>(std::move(func))) {}
    inline void call(DocumentScan result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const DocumentScan& /* result */)>> _function;
  };
  Func_void_DocumentScan create_Func_void_DocumentScan(void* _Nonnull swiftClosureWrapper);
  inline Func_void_DocumentScan_Wrapper wrap_Func_void_DocumentScan(Func_void_DocumentScan value) {
    return Func_void_DocumentScan_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  /**
   * Specialized version of `std::function<void(const std::exception_ptr&)>`.
   */
  using Func_void_std__exception_ptr = std::function<void(const std::exception_ptr& /* error */)>;
  /**
   * Wrapper class for a `std::function<void(const std::exception_ptr& / * error * /)>`, this can be used from Swift.
   */
  class Func_void_std__exception_ptr_Wrapper final {
  public:
    explicit Func_void_std__exception_ptr_Wrapper(std::function<void(const std::exception_ptr& /* error */)>&& func): _function(std::make_shared<std::function<void(const std::exception_ptr& /* error */)>>(std::move(func))) {}
    inline void call(std::exception_ptr error) const {
      _function->operator()(error);
    }
  private:
    std::shared_ptr<std::function<void(const std::exception_ptr& /* error */)>> _function;
  };
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__exception_ptr_Wrapper wrap_Func_void_std__exception_ptr(Func_void_std__exception_ptr value) {
    return Func_void_std__exception_ptr_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::documentcamera::HybridDocumentCameraSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::documentcamera::HybridDocumentCameraSpec>`.
   */
  using std__shared_ptr_margelo__nitro__documentcamera__HybridDocumentCameraSpec_ = std::shared_ptr<margelo::nitro::documentcamera::HybridDocumentCameraSpec>;
  std::shared_ptr<margelo::nitro::documentcamera::HybridDocumentCameraSpec> create_std__shared_ptr_margelo__nitro__documentcamera__HybridDocumentCameraSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__documentcamera__HybridDocumentCameraSpec_(std__shared_ptr_margelo__nitro__documentcamera__HybridDocumentCameraSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::documentcamera::HybridDocumentCameraSpec>
  using std__weak_ptr_margelo__nitro__documentcamera__HybridDocumentCameraSpec_ = std::weak_ptr<margelo::nitro::documentcamera::HybridDocumentCameraSpec>;
  inline std__weak_ptr_margelo__nitro__documentcamera__HybridDocumentCameraSpec_ weakify_std__shared_ptr_margelo__nitro__documentcamera__HybridDocumentCameraSpec_(const std::shared_ptr<margelo::nitro::documentcamera::HybridDocumentCameraSpec>& strong) { return strong; }
  
  // pragma MARK: Result<std::shared_ptr<Promise<DocumentScan>>>
  using Result_std__shared_ptr_Promise_DocumentScan___ = Result<std::shared_ptr<Promise<DocumentScan>>>;
  inline Result_std__shared_ptr_Promise_DocumentScan___ create_Result_std__shared_ptr_Promise_DocumentScan___(const std::shared_ptr<Promise<DocumentScan>>& value) {
    return Result<std::shared_ptr<Promise<DocumentScan>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_DocumentScan___ create_Result_std__shared_ptr_Promise_DocumentScan___(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<DocumentScan>>>::withError(error);
  }

} // namespace margelo::nitro::documentcamera::bridge::swift
