///
/// HybridDocumentCameraSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridDocumentCameraSpec``
public protocol HybridDocumentCameraSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func scanDocuments(config: DocumentScanConfig) throws -> Promise<[DocumentScan]>
}

/// See ``HybridDocumentCameraSpec``
public class HybridDocumentCameraSpec_base {
  private weak var cxxWrapper: HybridDocumentCameraSpec_cxx? = nil
  public func getCxxWrapper() -> HybridDocumentCameraSpec_cxx {
  #if DEBUG
    guard self is HybridDocumentCameraSpec else {
      fatalError("`self` is not a `HybridDocumentCameraSpec`! Did you accidentally inherit from `HybridDocumentCameraSpec_base` instead of `HybridDocumentCameraSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridDocumentCameraSpec_cxx(self as! HybridDocumentCameraSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the DocumentCamera HybridObject.
 * Implement this protocol to create Swift-based instances of DocumentCamera.
 * ```swift
 * class HybridDocumentCamera : HybridDocumentCameraSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridDocumentCameraSpec = HybridDocumentCameraSpec_protocol & HybridDocumentCameraSpec_base
