///
/// DocumentScan.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `DocumentScan`, backed by a C++ struct.
 */
public typealias DocumentScan = margelo.nitro.documentcamera.DocumentScan

public extension DocumentScan {
  private typealias bridge = margelo.nitro.documentcamera.bridge.swift

  /**
   * Create a new instance of `DocumentScan`.
   */
  init(title: String, pages: [DocumentPage]) {
    self.init(std.string(title), { () -> bridge.std__vector_DocumentPage_ in
      var __vector = bridge.create_std__vector_DocumentPage_(pages.count)
      for __item in pages {
        __vector.push_back(__item)
      }
      return __vector
    }())
  }

  var title: String {
    @inline(__always)
    get {
      return String(self.__title)
    }
    @inline(__always)
    set {
      self.__title = std.string(newValue)
    }
  }
  
  var pages: [DocumentPage] {
    @inline(__always)
    get {
      return self.__pages.map({ __item in __item })
    }
    @inline(__always)
    set {
      self.__pages = { () -> bridge.std__vector_DocumentPage_ in
        var __vector = bridge.create_std__vector_DocumentPage_(newValue.count)
        for __item in newValue {
          __vector.push_back(__item)
        }
        return __vector
      }()
    }
  }
}
