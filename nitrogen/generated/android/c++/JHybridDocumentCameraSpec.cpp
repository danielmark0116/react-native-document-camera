///
/// JHybridDocumentCameraSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridDocumentCameraSpec.hpp"

// Forward declaration of `DocumentScan` to properly resolve imports.
namespace margelo::nitro::documentcamera { struct DocumentScan; }

#include <NitroModules/Promise.hpp>
#include <vector>
#include "DocumentScan.hpp"
#include <NitroModules/JPromise.hpp>
#include "JDocumentScan.hpp"
#include <string>

namespace margelo::nitro::documentcamera {

  jni::local_ref<JHybridDocumentCameraSpec::jhybriddata> JHybridDocumentCameraSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridDocumentCameraSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridDocumentCameraSpec::initHybrid),
    });
  }

  size_t JHybridDocumentCameraSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<Promise<std::vector<DocumentScan>>> JHybridDocumentCameraSpec::scanDocuments() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("scanDocuments");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<std::vector<DocumentScan>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JArrayClass<JDocumentScan>>(__boxedResult);
        __promise->resolve([&]() {
          size_t __size = __result->size();
          std::vector<DocumentScan> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = __result->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::documentcamera
