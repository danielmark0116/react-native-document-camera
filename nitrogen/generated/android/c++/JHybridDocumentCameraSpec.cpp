///
/// JHybridDocumentCameraSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridDocumentCameraSpec.hpp"

// Forward declaration of `DocumentScan` to properly resolve imports.
namespace margelo::nitro::documentcamera { struct DocumentScan; }
// Forward declaration of `DocumentPage` to properly resolve imports.
namespace margelo::nitro::documentcamera { struct DocumentPage; }
// Forward declaration of `DocumentScanConfig` to properly resolve imports.
namespace margelo::nitro::documentcamera { struct DocumentScanConfig; }

#include <NitroModules/Promise.hpp>
#include "DocumentScan.hpp"
#include <NitroModules/JPromise.hpp>
#include "JDocumentScan.hpp"
#include <string>
#include <vector>
#include "DocumentPage.hpp"
#include "JDocumentPage.hpp"
#include "DocumentScanConfig.hpp"
#include "JDocumentScanConfig.hpp"

namespace margelo::nitro::documentcamera {

  jni::local_ref<JHybridDocumentCameraSpec::jhybriddata> JHybridDocumentCameraSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridDocumentCameraSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridDocumentCameraSpec::initHybrid),
    });
  }

  size_t JHybridDocumentCameraSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<Promise<DocumentScan>> JHybridDocumentCameraSpec::scanDocuments(const DocumentScanConfig& config) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JDocumentScanConfig> /* config */)>("scanDocuments");
    auto __result = method(_javaPart, JDocumentScanConfig::fromCpp(config));
    return [&]() {
      auto __promise = Promise<DocumentScan>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JDocumentScan>(__boxedResult);
        __promise->resolve(__result->toCpp());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::documentcamera
